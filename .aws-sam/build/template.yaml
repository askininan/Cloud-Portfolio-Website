AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "\"askininan.com\" Portfolio-Website backend IaC \n"
Parameters:
  DomainName:
    Type: String
    Default: askininan.com
Globals:
  Function:
    Timeout: 4
Resources:
  S3WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: DomainName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
        - AllowedMethods:
          - GET
          - HEAD
          AllowedOrigins:
          - '*'
          AllowedHeaders:
          - '*'
  S3WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3WebsiteBucket
      PolicyDocument:
        Statement:
        - Sid: PublicReadOAI
          Effect: Allow
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                ${CloudFrontOAI}
          Action: s3:GetObject
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3WebsiteBucket
              - /*
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Serverless website in S3 CloudFront OAI
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName:
            Fn::GetAtt:
            - S3WebsiteBucket
            - DomainName
          Id: s3BucketOrigin
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOAI}
        Enabled: 'true'
        DefaultRootObject: index.html
        Aliases:
        - askininan.com
        - www.askininan.com
        DefaultCacheBehavior:
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: s3BucketOrigin
          DefaultTTL: 40
          MinTTL: 1
          MaxTTL: 86400
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:526450518584:certificate/55033313-9dd8-4400-ab9a-71479d0fc57d
          SslSupportMethod: sni-only
  MyRoute53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Z07970082EGHK518NHF8D
      RecordSets:
      - Name: askininan.com
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName:
            Fn::GetAtt:
            - CloudFrontDistribution
            - DomainName
  Counter:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Counter
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        Counter:
          Type: Api
          Properties:
            Path: /get
            Method: get
      Environment:
        Variables:
          databaseName:
            Ref: ResumeCounterTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ResumeCounterTable
  APIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
      - ApiId:
          Ref: ServerlessRestApi
        Stage: Prod
      Description: Usage Plan for rate limiting
      Quota:
        Limit: 2000
        Period: MONTH
      Throttle:
        BurstLimit: 60
        RateLimit: 30
      UsagePlanName: VisitorCounterThrottle
  ResumeCounterTable:
    Type: AWS::Serverless::SimpleTable
Outputs:
  CounterApi:
    Description: API Gateway endpoint URL for Prod stage for Counter function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get
