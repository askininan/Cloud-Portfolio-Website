AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  "askininan.com" Portfolio-Website backend IaC 

Parameters:
  DomainName:
    Type: String
    Default: 'askininan.com'


Resources:


####### Static - Website #######

# S3 bucket for storing static content
  S3WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

# S3 bucket policy - permission on S3 bucket that allows access only through CloudFront OAI.
  S3WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadOAI
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}"
            Action: s3:GetObject
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref S3WebsiteBucket
                - /*
      

####### CloudFront - Route53 #######

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "Serverless website in S3 CloudFront OAI"

# CloudFront Distribution
# Template reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-cloudfront.html#scenario-cloudfront-s3origin
# Recommended reading: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-requirements
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3WebsiteBucket.DomainName
            Id: s3BucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOAI}"
        Enabled: "true"
        DefaultRootObject: index.html 
        Aliases:
          - askininan.com
          - www.askininan.com
        DefaultCacheBehavior:
          Compress: 'true'
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: s3BucketOrigin
          DefaultTTL: 40
          MinTTL: 1
          MaxTTL: 86400
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:526450518584:certificate/55033313-9dd8-4400-ab9a-71479d0fc57d
          SslSupportMethod: sni-only  #Cannot deploy AcmCert without SslSupportMethod specified


# Route53, creating A record into already created hosted zone for "askininan.com" and targeting it to cloudFront alias
# Templateeference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-recordsetgroup.html
  MyRoute53Record:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: Z07970082EGHK518NHF8D
      RecordSets:
        - Name: askininan.com
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 #All CloudFront Distributions live in the same (this one) hosted zone
            DNSName: !GetAtt CloudFrontDistribution.DomainName



####### Lambda - API #######

# Lambda function resource referencing VisitorCounter function in app.py
  Counter:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Lambda/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        Counter:
          Type: Api
          Properties:
            Path: /get
            Method: get
      Environment:
        Variables: 
          databaseName : !Ref ResumeCounterTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ResumeCounterTable


# As Chris Nagy explains how he got denial-of-wallet attack on his portfolio website, API Gateway throttling is necessary to rate limit get requests: https://not-blog.heyitschris.com/the-story-of-my-possibly-denial-of-wallet-attack-on-aws-serverless-ckddlds1u011oxvs1d873fhsy
# API Gateway - Usage Plan - API Throttling

  APIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ServerlessRestApi
          Stage: Prod
      Description: Usage Plan for rate limiting
      Quota:
        Limit: 2000
        Period: MONTH
      Throttle:
        BurstLimit: 60
        RateLimit: 30
      UsagePlanName: VisitorCounterThrottle

  


####### NOSQL Table #######

# DynamoDB table for counter data
  ResumeCounterTable:
    Type: AWS::Serverless::SimpleTable
    
Outputs:
  CounterApi:
    Description: "API Gateway endpoint URL for Prod stage for Counter function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get"